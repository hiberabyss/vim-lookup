Given vim:
  function! s:func(a, b)
  endfunc
  let s:var = 'foo'
  execute 'let s:var = "bar"'
  echomsg s:var
  let s:var = 'foo'
  function! s:func(a, b)
  endfunc
Do:
  6Gw
Then (:Lookup cycles through script-local variables):
  AssertEqual [6, 5], [line('.'), col('.')]
  Lookup
  AssertEqual [4, 16], [line('.'), col('.')]
  Lookup
  AssertEqual [3, 7], [line('.'), col('.')]
  Lookup
  AssertEqual [6, 7], [line('.'), col('.')]
  Lookup
  AssertEqual [4, 16], [line('.'), col('.')]

Given vim:
  call s:func()
  let s:func = 42
  function! s:func(a, b)
  endfunc
  let s:func = 42
  call s:func()
Do:
  Gw
Then (:Lookup cycles through script-local functions):
  AssertEqual [6, 6], [line('.'), col('.')]
  Lookup
  AssertEqual [3, 13], [line('.'), col('.')]
  Lookup
  AssertEqual [3, 13], [line('.'), col('.')]

Execute (:Lookup jumps to autoload variable):
  edit fixture/plugin/auto.vim
  normal! 1Gw
  Lookup
  AssertEqual 'fixture/autoload/auto/foo.vim', expand('%')
  AssertEqual [5, 5], [line('.'), col('.')]
  bwipeout

Execute (:Lookup jumps to autoload function):
  edit fixture/plugin/auto.vim
  normal! 2Gw
  Lookup
  AssertEqual 'fixture/autoload/auto/foo.vim', expand('%')
  AssertEqual [1, 11], [line('.'), col('.')]
  bwipeout
